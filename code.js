
//Held-Karp Solution

function tsp_hk(dist) {
    // cities is the set of cities not visited so far, including start
    let cities = [];
    for (let i = 0; i < dist.length; i++) {
        cities.push(i);
    }
    let best = Infinity;

    //memoization
    let cache = [];
    for (let i = 0; i < cities.length; i++) {
        let temp = heldKarp([...cities], i);
        if (temp < best) { best = temp; }
    }
    return best;    

    function heldKarp(cities, start) {
        let key = JSON.stringify([cities, start]);
        if (cache[key] != undefined) { return cache[key]; }
        if (cities.length == 2) {
            //return length of tour that starts at start, goes directly to other city in cities
            cache[key] = dist[cities[0]][cities[1]];
            return dist[cities[0]][cities[1]];
        }
        else if (cities.length < 2) { return 0; }
        else {
            //return the minimum
            let min = Infinity;

            //make list of cities excluding the start
            cities.splice(cities.indexOf(start), 1);

            //for each city in cities, unless the city is start
            for (let i = 0; i < cities.length; i++) {
                //reduce the set of cities that are unvisited by one (the old start), set the new start, add on the distance from old start to new start
                let d = heldKarp([...cities], cities[i]) + dist[start][cities[i]];
                if (d < min) { min = d; }
            }
            cache[key] = min;
            return min;
        }
    }
}



//Local Search Solution

function tsp_ls(matrix) {
    let len = matrix.length;

    //Generate a random starting route
    //Uses Durstenfeld's shuffle algorithm: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm
    route = Array.from(Array(len).keys())
    for (let i = route.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [route[i], route[j]] = [route[j], route[i]];
    }

    //Run the function repeatedly, going through variables systematically
    //Inspired by https://en.wikipedia.org/wiki/2-opt
    var improved = true;
    while (improved) {
        improved = false;
        for (let i = 0; i < len - 1; i++) {
            for (let k = i + 1; k < len; k++) {
                let newRoute = twoOptSwap(route, i, k);
                if (dist(newRoute) < dist(route)) {
                    route = newRoute;
                    improved = true;
                }
            }
        }
    }
    return dist(route);

    //Function to reverse cities i to k
    function twoOptSwap(route, i, k) {
        let swap = route.slice(i, k + 1);
        swap.reverse();
        return route.slice(0, i).concat(swap).concat(route.slice(k + 1));
    }

    //Get the total distance of a route
    function dist(route) {
        let d = 0;
        for (let i = 0; i < route.length - 1; i++) {
            d += matrix[route[i]][route[i + 1]];
        }
        return d;
    }
}


//Many test cases from https://people.sc.fsu.edu/~jburkardt/datasets/tsp/tsp.html

//Size 1
var graph = [[0]];
test(graph);

//Size 3
graph = [[0,1,2],
        [1,0,2],
        [2,2,0]];
test(graph);

//Size 5
graph = [[0,3,4,2,7],
        [3,0,4,6,3],
        [4,4,0,5,8],
        [2,6,5,0,6],
        [7,3,8,6,0]];
test(graph);

//Size 10
graph = [[0,29,82,46,68,52,72,42,51,55],
        [29,0,55,46,42,43,43,23,23,31],
        [82,55,0,68,46,55,23,43,41,29],
        [46,46,68,0,82,15,72,31,62,42],
        [68,42,46,82,0,74,23,52,21,46],
        [52,43,55,15,74,0,61,23,55,31],
        [72,43,23,72,23,61,0,42,23,31],
        [42,23,43,31,52,23,42,0,33,15],
        [51,23,41,62,21,55,23,33,0,29],
        [55,31,29,42,46,31,31,15,29,0]];
test(graph);

//Size 15
graph = [[0,29,82,46,68,52,72,42,51,55,29,74,23,72,46],
        [29,0,55,46,42,43,43,23,23,31,41,51,11,52,21],
        [82,55,0,68,46,55,23,43,41,29,79,21,64,31,51],
        [46,46,68,0,82,15,72,31,62,42,21,51,51,43,64],
        [68,42,46,82,0,74,23,52,21,46,82,58,46,65,23],
        [52,43,55,15,74,0,61,23,55,31,33,37,51,29,59],
        [72,43,23,72,23,61,0,42,23,31,77,37,51,46,33],
        [42,23,43,31,52,23,42,0,33,15,37,33,33,31,37],
        [51,23,41,62,21,55,23,33,0,29,62,46,29,51,11],
        [55,31,29,42,46,31,31,15,29,0,51,21,41,23,37],
        [29,41,79,21,82,33,77,37,62,51,0,65,42,59,61],
        [74,51,21,51,58,37,37,33,46,21,65,0,61,11,55],
        [23,11,64,51,46,51,51,33,29,41,42,61,0,62,23],
        [72,52,31,43,65,29,46,31,51,23,59,11,62,0,59],
        [46,21,51,64,23,59,33,37,11,37,61,55,23,59,0]];
test(graph);

//Size 17
graph = [[0,633,257,91,412,150,80,134,259,505,353,324,70,211,268,246,121],
        [633,0,390,661,227,488,572,530,555,289,282,638,567,466,420,745,518],
        [257,390,0,228,169,112,196,154,372,262,110,437,191,74,53,472,142],
        [91,661,228,0,383,120,77,105,175,476,324,240,27,182,239,237,84],
        [412,227,169,383,0,267,351,309,338,196,61,421,346,243,199,528,297],
        [150,488,112,120,267,0,63,34,264,360,208,329,83,105,123,364,35],
        [80,572,196,77,351,63,0,29,232,444,292,297,47,150,207,332,29],
        [134,530,154,105,309,34,29,0,249,402,250,314,68,108,165,349,36],
        [259,555,372,175,338,264,232,249,0,495,352,95,189,326,383,202,236],
        [505,289,262,476,196,360,444,402,495,0,154,578,439,336,240,685,390],
        [353,282,110,324,61,208,292,250,352,154,0,435,287,184,140,542,238],
        [324,638,437,240,421,329,297,314,95,578,435,0,254,391,448,157,301],
        [70,567,191,27,346,83,47,68,189,439,287,254,0,145,202,289,55],
        [211,466,74,182,243,105,150,108,326,336,184,391,145,0,57,426,96],
        [268,420,53,239,199,123,207,165,383,240,140,448,202,57,0,483,153],
        [246,745,472,237,528,364,332,349,202,685,542,157,289,426,483,0,336],
        [121,518,142,84,297,35,29,36,236,390,238,301,55,96,153,336,0]];
test(graph);

//Size 18
graph = [[0,83,93,129,133,139,151,169,135,114,110,98,99,95,81,152,159,181],
        [83,0,40,53,62,64,91,116,93,84,95,98,89,68,67,127,156,175],
        [93,40,0,42,42,49,59,81,54,44,58,64,54,31,36,86,117,135],
        [129,53,42,0,11,11,46,72,65,70,88,100,89,66,76,102,142,156],
        [133,62,42,11,0,9,35,61,55,62,82,95,84,62,74,93,133,146],
        [139,64,49,11,9,0,39,65,63,71,90,103,92,71,82,100,141,153],
        [151,91,59,46,35,39,0,26,34,52,71,88,77,63,78,66,110,119],
        [169,116,81,72,61,65,26,0,37,59,75,92,83,76,91,54,98,103],
        [135,93,54,65,55,63,34,37,0,22,39,56,47,40,55,37,78,91],
        [114,84,44,70,62,71,52,59,22,0,20,36,26,20,34,43,74,91],
        [110,95,58,88,82,90,71,75,39,20,0,18,11,27,32,42,61,80],
        [98,98,64,100,95,103,88,92,56,36,18,0,11,34,31,56,63,85],
        [99,89,54,89,84,92,77,83,47,26,11,11,0,23,24,53,68,89],
        [95,68,31,66,62,71,63,76,40,20,27,34,23,0,15,62,87,106],
        [81,67,36,76,74,82,78,91,55,34,32,31,24,15,0,73,92,112],
        [152,127,86,102,93,100,66,54,37,43,42,56,53,62,73,0,44,54],
        [159,156,117,142,133,141,110,98,78,74,61,63,68,87,92,44,0,22],
        [181,175,135,156,146,153,119,103,91,91,80,85,89,106,112,54,22,0]];
test(graph);

//Size 19
graph = [[0,83,93,129,133,139,151,169,135,114,110,98,99,95,81,152,159,181,172],
        [83,0,40,53,62,64,91,116,93,84,95,98,89,68,67,127,156,175,152],
        [93,40,0,42,42,49,59,81,54,44,58,64,54,31,36,86,117,135,112],
        [129,53,42,0,11,11,46,72,65,70,88,100,89,66,76,102,142,156,127],
        [133,62,42,11,0,9,35,61,55,62,82,95,84,62,74,93,133,146,117],
        [139,64,49,11,9,0,39,65,63,71,90,103,92,71,82,100,141,153,124],
        [151,91,59,46,35,39,0,26,34,52,71,88,77,63,78,66,110,119,88],
        [169,116,81,72,61,65,26,0,37,59,75,92,83,76,91,54,98,103,70],
        [135,93,54,65,55,63,34,37,0,22,39,56,47,40,55,37,78,91,62],
        [114,84,44,70,62,71,52,59,22,0,20,36,26,20,34,43,74,91,68],
        [110,95,58,88,82,90,71,75,39,20,0,18,11,27,32,42,61,80,64],
        [98,98,64,100,95,103,88,92,56,36,18,0,11,34,31,56,63,85,75],
        [99,89,54,89,84,92,77,83,47,26,11,11,0,23,24,53,68,89,74],
        [95,68,31,66,62,71,63,76,40,20,27,34,23,0,15,62,87,106,87],
        [81,67,36,76,74,82,78,91,55,34,32,31,24,15,0,73,92,112,96],
        [152,127,86,102,93,100,66,54,37,43,42,56,53,62,73,0,44,54,26],
        [159,156,117,142,133,141,110,98,78,74,61,63,68,87,92,44,0,22,34],
        [181,175,135,156,146,153,119,103,91,91,80,85,89,106,112,54,22,0,33],
        [172,152,112,127,117,124,88,70,62,68,64,75,74,87,96,26,34,33,0]];
test(graph);

//Size 20
graph = [[0,83,93,129,133,139,151,169,135,114,110,98,99,95,81,152,159,181,172,185],
        [83,0,40,53,62,64,91,116,93,84,95,98,89,68,67,127,156,175,152,165],
        [93,40,0,42,42,49,59,81,54,44,58,64,54,31,36,86,117,135,112,125],
        [129,53,42,0,11,11,46,72,65,70,88,100,89,66,76,102,142,156,127,139],
        [133,62,42,11,0,9,35,61,55,62,82,95,84,62,74,93,133,146,117,128],
        [139,64,49,11,9,0,39,65,63,71,90,103,92,71,82,100,141,153,124,135],
        [151,91,59,46,35,39,0,26,34,52,71,88,77,63,78,66,110,119,88,98],
        [169,116,81,72,61,65,26,0,37,59,75,92,83,76,91,54,98,103,70,78],
        [135,93,54,65,55,63,34,37,0,22,39,56,47,40,55,37,78,91,62,74],
        [114,84,44,70,62,71,52,59,22,0,20,36,26,20,34,43,74,91,68,82],
        [110,95,58,88,82,90,71,75,39,20,0,18,11,27,32,42,61,80,64,77],
        [98,98,64,100,95,103,88,92,56,36,18,0,11,34,31,56,63,85,75,87],
        [99,89,54,89,84,92,77,83,47,26,11,11,0,23,24,53,68,89,74,87],
        [95,68,31,66,62,71,63,76,40,20,27,34,23,0,15,62,87,106,87,100],
        [81,67,36,76,74,82,78,91,55,34,32,31,24,15,0,73,92,112,96,109],
        [152,127,86,102,93,100,66,54,37,43,42,56,53,62,73,0,44,54,26,39],
        [159,156,117,142,133,141,110,98,78,74,61,63,68,87,92,44,0,22,34,38],
        [181,175,135,156,146,153,119,103,91,91,80,85,89,106,112,54,22,0,33,29],
        [172,152,112,127,117,124,88,70,62,68,64,75,74,87,96,26,34,33,0,13],
        [185,165,125,139,128,135,98,78,74,82,77,87,87,100,109,39,38,29,13,0]];
test(graph);

console.log("Finished!")


function test(graph) {
    console.log("Time Test:\n");

    console.time("Held-Karp");
    console.log("Result: ", tsp_hk(graph));
    console.timeEnd("Held-Karp");

    console.log("");
    
    console.time("Local Search");
    console.log("Result: ", tsp_ls(graph));
    console.timeEnd("Local Search");

    console.log("\n-----\n");
}